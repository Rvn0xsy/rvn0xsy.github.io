<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C++/C on 倾旋的博客</title><link>https://payloads.online/categories/c++/c/</link><description>Recent content in C++/C on 倾旋的博客</description><generator>Hugo</generator><language>zh-cn</language><copyright>倾旋 All rights reserved</copyright><lastBuildDate>Fri, 21 Dec 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://payloads.online/categories/c++/c/index.xml" rel="self" type="application/rss+xml"/><item><title>Windows - 内存管理</title><link>https://payloads.online/archivers/2018-12-21/1/</link><pubDate>Fri, 21 Dec 2018 00:00:00 +0000</pubDate><guid>https://payloads.online/archivers/2018-12-21/1/</guid><description>&lt;h2 id="0x00-windows-heap">0x00 Windows Heap&lt;/h2>
&lt;p>每个线程都有自己的堆栈，堆用于在内存中存储未知大小的数据，由堆管理器管理，而栈用于保存函数执行状态，存储局部变量。&lt;/p>
&lt;h2 id="0x01-申请堆空间的步骤---heap-api">0x01 申请堆空间的步骤 - Heap API&lt;/h2>
&lt;ul>
&lt;li>HeapCreate // 创建堆句柄（内核对象）&lt;/li>
&lt;li>GetProcessHeap // 获取一个堆句柄&lt;/li>
&lt;li>GetProcessHeaps // 获取所有堆句柄&lt;/li>
&lt;li>HeapAlloc // 申请堆空间&lt;/li>
&lt;li>HeapReAlloc // 在HeapAlloc的基础上申请一块堆空间&lt;/li>
&lt;li>HeapFree // 释放堆空间&lt;/li>
&lt;li>HeapDestory // 销毁堆句柄&lt;/li>
&lt;/ul>
&lt;h2 id="0x02-heapcreate-example">0x02 HeapCreate Example&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// ConsoleApplication2.cpp : 定义控制台应用程序的入口点。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 堆管理
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;#34;stdafx.h&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;Windows.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>VOID &lt;span style="color:#a6e22e">P&lt;/span>(&lt;span style="color:#66d9ef">wchar_t&lt;/span> &lt;span style="color:#f92672">*&lt;/span> contents) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	std&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">wprintf&lt;/span>(contents);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">system&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;pause&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">exit&lt;/span>(&lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">_tmain&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">// 堆管理
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#75715e">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">	# 创建堆
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">	HANDLE HeapCreate(
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">	 DWORD flOptions,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">	 SIZE_T dwInitialSize,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">	 SIZE_T dwMaximumSize
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">	);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">	
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">	flOptions: 1.HEAP_CREATE_ENABLE_EXECUTE 代码允许执行
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">			 2.HEAP_GENERATE_EXCEPTIONS 如果分配内存失败，会产生异常
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">			 3.HEAP_NO_SERIALIZE 不进行连续存取
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">	dwInitialSize: 堆的初始化大小，如果为0，则系统会自动分配一个大小。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">	dwMaximumSize: 堆的最大值，如果为0，将是一个可增长的堆，可以达到系统能够分配的最大值。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">	*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	HANDLE hHeap &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">HeapCreate&lt;/span>(HEAP_CREATE_ENABLE_EXECUTE, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span> (hHeap &lt;span style="color:#f92672">==&lt;/span> NULL) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">P&lt;/span>(&lt;span style="color:#a6e22e">TEXT&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Error HeapCreate() ...&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">	# 获取堆句柄
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">	HANDLE GetProcessHeap();
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">	函数返回堆句柄，如果返回值为NULL，获取堆失败
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">	*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	HANDLE hHeapRand &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">GetProcessHeap&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span> (hHeapRand &lt;span style="color:#f92672">==&lt;/span> NULL) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">P&lt;/span>(&lt;span style="color:#a6e22e">TEXT&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;GetProcessHeap() : No Heap ...&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">	# 获取堆句柄
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">	DWORD GetProcessHeaps(
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">	 DWORD NumberOfHeaps, // 输入参数，要获取的句柄数量
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">	 PHANDLE ProcessHeaps // 输出参数，句柄数组，用于保存多个句柄
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">	);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">	函数返回堆句柄，如果返回值为NULL，获取堆失败
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">	*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	CONST DWORD dwHeapMax &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1024&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	HANDLE hHeapsNum[dwHeapMax];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	DWORD dwHeapNum &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">GetProcessHeaps&lt;/span>(dwHeapMax, hHeapsNum);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	std&lt;span style="color:#f92672">::&lt;/span>wcout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Heap number : &amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> dwHeapNum &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">	# 为堆分配内存
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">	DECLSPEC_ALLOCATOR LPVOID HeapAlloc(
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">		HANDLE hHeap, // 堆句柄
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">		DWORD dwFlags,// 内存分配标志
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">		SIZE_T dwBytes // 分配大小（字节为单位）
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">	);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">	dwFlags: 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">		HEAP_GENERATE_EXCEPTIONS -&amp;gt; 抛出异常
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">		HEAP_NO_SERIALIZE -&amp;gt; 不连续存储
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">		HEAP_ZERO_MEMORY -&amp;gt; 将内存块全部清零
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">	*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	LPTSTR tAlloc &lt;span style="color:#f92672">=&lt;/span> (LPTSTR)&lt;span style="color:#a6e22e">HeapAlloc&lt;/span>(hHeapRand, HEAP_ZERO_MEMORY, &lt;span style="color:#ae81ff">1000&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">	# 在已分配的基础上继续分配
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">	DECLSPEC_ALLOCATOR LPVOID HeapReAlloc(
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">	 HANDLE hHeap, // 堆句柄
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">	 DWORD dwFlags, // 内存分配标志
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">	 _Frees_ptr_opt_ LPVOID lpMem, // 分配内存后的位置
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">	 SIZE_T dwBytes // 分配大小（字节为单位）
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">	);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">	*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">HeapReAlloc&lt;/span>(hHeapRand, HEAP_ZERO_MEMORY&lt;span style="color:#f92672">|&lt;/span> HEAP_REALLOC_IN_PLACE_ONLY, (LPVOID)tAlloc,&lt;span style="color:#ae81ff">24&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">lstrcpy&lt;/span>((LPTSTR)tAlloc, &lt;span style="color:#a6e22e">TEXT&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;HEllo&amp;#34;&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	DWORD dwHeapSize &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">HeapSize&lt;/span>(hHeapRand, HEAP_NO_SERIALIZE, tAlloc);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	std&lt;span style="color:#f92672">::&lt;/span>wcout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;HeapSize : &amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> dwHeapSize &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">HeapFree&lt;/span>(hHeapRand, HEAP_NO_SERIALIZE, tAlloc);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">HeapDestroy&lt;/span>(hHeapRand);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	std&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">wprintf&lt;/span>(&lt;span style="color:#a6e22e">TEXT&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Success ... &lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">system&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;pause&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="0x03-虚拟内存页管理">0x03 虚拟内存页管理&lt;/h2>
&lt;h3 id="申请虚拟内存页">申请虚拟内存页&lt;/h3>
&lt;p>&lt;strong>VirtualAlloc&lt;/strong>&lt;/p></description></item><item><title>Windows 文件映射</title><link>https://payloads.online/archivers/2018-12-20/windows-FileMapping/</link><pubDate>Thu, 20 Dec 2018 00:00:00 +0000</pubDate><guid>https://payloads.online/archivers/2018-12-20/windows-FileMapping/</guid><description>&lt;h2 id="0x00-文件映射的原理">0x00 文件映射的原理&lt;/h2>
&lt;p>文件映射(Mapping)是一种能够将文件内容映射到进程的虚拟地址空间的技术。视图(view)是一个由映射句柄开辟的一块虚拟地址空间，用于存放文件内容，当文件被映射完成后，改写视图虚拟地址空间的内容就相当于更改文件内容。&lt;/p>
&lt;p>一般情况下，当代码运行完毕后，视图将会被自动写入文件中。&lt;/p>
&lt;h2 id="0x01-文件映射的步骤">0x01 文件映射的步骤&lt;/h2>
&lt;ul>
&lt;li>CreateFile()&amp;hellip;&lt;/li>
&lt;li>CreateFileMapping()&amp;hellip;&lt;/li>
&lt;li>MapViewofFile()&amp;hellip;&lt;/li>
&lt;li>FlushViewofFile()&amp;hellip;&lt;/li>
&lt;/ul>
&lt;p>首先需要创建一个文件句柄，然后再创建一个文件映射的Mapping内核对象，通过映射获得视图。&lt;/p>
&lt;h2 id="0x02-文件映射简单代码">0x02 文件映射简单代码&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// ConsoleApplication2.cpp : 定义控制台应用程序的入口点。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;#34;stdafx.h&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;Windows.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">_tmain&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">// 内存映射
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#75715e">// CreateFile()...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#75715e">// CreateFileMapping()...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#75715e">// MapViewofFile()...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#75715e">// FlushViewofFile...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	HANDLE hFile &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">CreateFile&lt;/span>(&lt;span style="color:#a6e22e">TEXT&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;C:&lt;/span>&lt;span style="color:#ae81ff">\\&lt;/span>&lt;span style="color:#e6db74">Temp&lt;/span>&lt;span style="color:#ae81ff">\\&lt;/span>&lt;span style="color:#e6db74">99.txt&amp;#34;&lt;/span>), GENERIC_ALL, &lt;span style="color:#ae81ff">0&lt;/span>, NULL, OPEN_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span> (hFile &lt;span style="color:#f92672">==&lt;/span> INVALID_HANDLE_VALUE) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		std&lt;span style="color:#f92672">::&lt;/span>wcout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e22e">GetLastError&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">MessageBox&lt;/span>(&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#a6e22e">TEXT&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;CreateFile&amp;#34;&lt;/span>), &lt;span style="color:#a6e22e">TEXT&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Error&amp;#34;&lt;/span>), MB_OK);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	HANDLE hMap &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">CreateFileMapping&lt;/span>(hFile, NULL, PAGE_READWRITE, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">1024&lt;/span>, &lt;span style="color:#a6e22e">TEXT&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;f&amp;#34;&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span> (hMap &lt;span style="color:#f92672">==&lt;/span> INVALID_HANDLE_VALUE) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	TCHAR szBuff[&lt;span style="color:#ae81ff">100&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">TEXT&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;sssss&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	TCHAR &lt;span style="color:#f92672">*&lt;/span> pFileVoid &lt;span style="color:#f92672">=&lt;/span> (TCHAR &lt;span style="color:#f92672">*&lt;/span>)&lt;span style="color:#a6e22e">MapViewOfFile&lt;/span>(hMap, FILE_MAP_ALL_ACCESS, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">1024&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">_tcscpy_s&lt;/span>(pFileVoid, &lt;span style="color:#a6e22e">_countof&lt;/span>(szBuff), szBuff);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	std&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">wprintf&lt;/span>(pFileVoid);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">system&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;pause&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">CloseHandle&lt;/span>(hMap);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">CloseHandle&lt;/span>(hFile);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="0x03-api-list">0x03 API List&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>HANDLE WINAPI &lt;span style="color:#a6e22e">CreateFile&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _In_ LPCTSTR lpFileName,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _In_ DWORD dwDesiredAccess,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _In_ DWORD dwShareMode,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _In_opt_ LPSECURITY_ATTRIBUTES lpSecurityAttributes,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _In_ DWORD dwCreationDisposition,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _In_ DWORD dwFlagsAndAttributes,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _In_opt_ HANDLE hTemplateFile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>HANDLE WINAPI &lt;span style="color:#a6e22e">CreateFileMapping&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _In_ HANDLE hFile,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _In_opt_ LPSECURITY_ATTRIBUTES lpAttributes,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _In_ DWORD flProtect,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _In_ DWORD dwMaximumSizeHigh,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _In_ DWORD dwMaximumSizeLow,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _In_opt_ LPCTSTR lpName
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>LPVOID WINAPI &lt;span style="color:#a6e22e">MapViewOfFile&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _In_ HANDLE hFileMappingObject,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _In_ DWORD dwDesiredAccess,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _In_ DWORD dwFileOffsetHigh,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _In_ DWORD dwFileOffsetLow,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _In_ SIZE_T dwNumberOfBytesToMap
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>BOOL WINAPI &lt;span style="color:#a6e22e">FlushViewOfFile&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _In_ LPCVOID lpBaseAddress,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _In_ SIZE_T dwNumberOfBytesToFlush
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>BOOL WINAPI &lt;span style="color:#a6e22e">UnmapViewOfFile&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _In_ LPCVOID lpBaseAddress
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>BOOL WINAPI &lt;span style="color:#a6e22e">UnmapViewOfFile&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _In_ LPCVOID lpBaseAddress
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="0x04-创建一个超大文件">0x04 创建一个超大文件&lt;/h2>
&lt;p>在写Example的过程中，我发现申请映射的内存空间会把每个字节写入文件中。&lt;/p></description></item><item><title>最近学习Windows编程总结</title><link>https://payloads.online/archivers/2018-12-20/1/</link><pubDate>Thu, 20 Dec 2018 00:00:00 +0000</pubDate><guid>https://payloads.online/archivers/2018-12-20/1/</guid><description>&lt;h2 id="0x00-windows-字符编码">0x00 Windows 字符编码&lt;/h2>
&lt;p>目前Windows最常见的字符集：&lt;/p>
&lt;ul>
&lt;li>1.ASCII&lt;/li>
&lt;li>2.Unicode&lt;/li>
&lt;li>3.UTF-16&lt;/li>
&lt;li>4.UTF-8&lt;/li>
&lt;/ul>
&lt;p>Unicode是一个字符集，UTF-16是Unicode的存储实现，Windows中的Unicode默认是UTF-16存储方式。&lt;/p>
&lt;p>Unicode：&lt;/p>
&lt;ul>
&lt;li>UTF-16：一个字符占用两个字节&lt;/li>
&lt;li>UTF8-8：一个字符占用两个字节，一般用于网络传输&lt;/li>
&lt;/ul>
&lt;h3 id="各个字符集的bom头">各个字符集的BOM头&lt;/h3>
&lt;ul>
&lt;li>UTF-8：EF BB BF&lt;/li>
&lt;li>UTF-16LE：FF FE&lt;/li>
&lt;li>UTF16BE：FE FF&lt;/li>
&lt;/ul>
&lt;h3 id="windows字符数据类型">Windows字符数据类型&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>CHAR &lt;span style="color:#f92672">-&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PSTR &lt;span style="color:#f92672">-&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>WCHAR &lt;span style="color:#f92672">-&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">wchar_t&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PWSTR &lt;span style="color:#f92672">-&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">wchar_t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TCHAR &lt;span style="color:#f92672">-&amp;gt;&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">一个宏，当前是什么字符集，编译出来就是什么字符集&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PTSTR &lt;span style="color:#f92672">-&amp;gt;&lt;/span> TCHAR &lt;span style="color:#f92672">*&lt;/span> (&lt;span style="color:#960050;background-color:#1e0010">有利于跨平台&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>开发中推荐使用“TEXT”宏与PTSTR类型的字符串指针。&lt;/p>
&lt;h2 id="0x01-windows进程创建">0x01 Windows进程创建&lt;/h2>
&lt;p>进程是一个程序正在运行的一个实例，它由一个内核对象和一个地址空间组成。&lt;/p>
&lt;p>内核对象与地址空间都在4GB的虚拟内存中，内核占2GB高地址，低地址的2GB给程序的堆栈使用。&lt;/p>
&lt;p>在Windows中，系统通过句柄管理进程中的资源，句柄存储在内核空间中的一个全局句柄表中，而每个进程也都有一个句柄表，这个句柄表是私有的。&lt;/p>
&lt;p>&lt;strong>PID&lt;/strong> 是指的是全局句柄表的值。&lt;/p>
&lt;h3 id="进程执行的加载过程">进程执行的加载过程&lt;/h3>
&lt;ul>
&lt;li>1.映射EXE&lt;/li>
&lt;li>2.创建内核对象EPROCESS&lt;/li>
&lt;li>3.映射系统DLL（ntdll.dll）&lt;/li>
&lt;li>4.创建线程内核对象ETHREAD&lt;/li>
&lt;li>5.系统启动线程、映射DLL（ntdll.LdrInitalizeThunk）、线程开始执行&lt;/li>
&lt;/ul>
&lt;h3 id="创建进程">创建进程&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>BOOL &lt;span style="color:#a6e22e">CreateProcess&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LPCTSTR lpApplicationName,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LPTSTR lpCommandLine,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LPSECURITY_ATTRIBUTES lpProcessAttributes,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LPSECURITY_ATTRIBUTES lpThreadAttributes,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>BOOL bInheritHandles,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>DWORD dwCreationFlags,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LPVOID lpEnvironment,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LPCTSTR lpCurrentDirectory,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LPSTARTUPINFO lpStartupInfo,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LPPROCESS_INFORMATIONlpProcessInformation
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="线程与进程的关系">线程与进程的关系&lt;/h3>
&lt;p>进程是一个程序正在运行的一个实例，它提供了一块存储代码的空间，在进程被创建时，系统也会给进程创建一个主线程（primary thread），主线程负责执行代码，一个进程没有线程是无法运行的。&lt;/p>
&lt;p>一个进程可以拥有多个线程，但是永远是先拥有主线程，通过主线程创建其他线程。&lt;/p></description></item><item><title>使用C语言发送伪造源IP的UDP请求及DRDOS拒绝服务攻击原理剖析</title><link>https://payloads.online/archivers/2018-03-04/1/</link><pubDate>Sun, 04 Mar 2018 00:00:00 +0000</pubDate><guid>https://payloads.online/archivers/2018-03-04/1/</guid><description>&lt;h2 id="0x01-什么是drdos">0x01 什么是DRDOS&lt;/h2>
&lt;p>DRDoS是英文“Distributed Reflection Denial of Service ”的缩写，中文意思是“分布式反射拒绝服务”。与DoS、DDoS不同，该方式靠的是发送大量带有被害者IP地址的数据包给攻击主机，然后攻击主机对IP地址源做出大量回应，形成拒绝服务攻击。&lt;/p>
&lt;h2 id="0x02-drdos的攻击流程">0x02 DRDOS的攻击流程&lt;/h2>
&lt;p>DRDoS要完成一次反射放大攻击：&lt;/p>
&lt;ul>
&lt;li>1 攻击者，必须提前需要把攻击数据存放在所有的在线肉鸡或者反射服务器之上。&lt;/li>
&lt;li>2 攻击者，必须伪造IP源头。发送海量伪造IP来源的请求。当然这里的IP就是受害者的IP地址。&lt;/li>
&lt;li>3 反射服务器，必须可以反射数据，运行良好稳定。最好是请求数据少，返回数据成万倍增加。&lt;/li>
&lt;/ul>
&lt;h2 id="0x03-drdos的特性">0x03 DRDOS的特性&lt;/h2>
&lt;p>（如果没有理解UDP协议，请不要向下继续阅读……会越来越混乱）&lt;/p>
&lt;p>根据上述概念可以理解为，DRDOS需要一个能够伪造IP头的协议，这个协议最突出的就是UDP协议了。&lt;/p>
&lt;ol>
&lt;li>使用基于 TCP 协议的通信不可以对源 IP 地址进行伪造&lt;/li>
&lt;li>使用基于 UDP 协议的通信可以对源 IP 地址进行伪造&lt;/li>
&lt;/ol>
&lt;p>TCP 不能伪造源 IP 地址是因为 TCP 协议中的三次握手的存在，如果源 IP 地址被修改，那么三次握手将无法达成。&lt;/p>
&lt;p>而 UDP 则不同，UDP 中不存在三次握手，那么发送端就只要发送数据即可，而接收端只要接收数据即可。所以，在 TCP 中不能对源 IP 地址进行伪造，而 UDP 中则可以。&lt;/p>
&lt;p>UDP协议不需要握手，直接发送接收，下面我来通过小故事来形象的描述UDP中的伪造IP头攻击：&lt;/p>
&lt;blockquote>
&lt;p>假设有三个用户，Allen、Jerry、Tom.&lt;/p>&lt;/blockquote>
&lt;h3 id="jerry与tom一次正常的udp请求">Jerry与Tom一次正常的UDP请求&lt;/h3>
&lt;p>&lt;code>Jerry说：&lt;/code>“我是Jerry，我的源端口是4787，我要向Tom的4478端口发送一个UDP报文”&lt;/p>
&lt;p>此时Tom的4478端口接收到一个UDP报文，需要回复内容，回复给谁呢，接下来需要根据报文中的IP头确定是谁发送的&lt;/p>
&lt;p>通过Jerry的话确定发送方是Jerry，而Jerry的端口是4787，那么Tom就会将数据传送给Jerry&lt;/p>
&lt;p>&lt;code>Tom说：&lt;/code>“我是Tom，我的源端口是4478，根据刚才接收到的一句话中，确认了发送人是Jerry，我把数据传送给Jerry的4787端口”&lt;/p>
&lt;h3 id="allen进行一次rdos攻击">Allen进行一次RDOS攻击&lt;/h3>
&lt;p>&lt;code>Allen说：&lt;/code>“我是Jerry，我的源端口是4787，我要向Tom的4478端口发送一个UDP报文”&lt;/p>
&lt;p>此时Tom接收到报文，根据上面这句话确定了发送人是Jerry，目的端口是4787&lt;/p>
&lt;p>&lt;code>Tom说：&lt;/code>“我是Tom，我的源端口是4478，根据刚才接收到的一句话中，确认了发送人是Jerry，我把数据传送给Jerry的4787端口”&lt;/p>
&lt;p>这个过程当中，Jerry并没有参与通信，但是接到了一个从Tom那里发送过来的UDP数据报文&lt;/p>
&lt;h2 id="0x04-编写一个伪造ip头的c语言程序">0x04 编写一个伪造IP头的C语言程序&lt;/h2>
&lt;blockquote>
&lt;p>/usr/include/netinet/ip.h&lt;/p>&lt;/blockquote>
&lt;p>这里面定义了IP头&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">ip&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#if __BYTE_ORDER == __LITTLE_ENDIAN
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> ip_hl:&lt;span style="color:#ae81ff">4&lt;/span>;		&lt;span style="color:#75715e">/* header length */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> ip_v:&lt;span style="color:#ae81ff">4&lt;/span>;		&lt;span style="color:#75715e">/* version */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#if __BYTE_ORDER == __BIG_ENDIAN
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> ip_v:&lt;span style="color:#ae81ff">4&lt;/span>;		&lt;span style="color:#75715e">/* version */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> ip_hl:&lt;span style="color:#ae81ff">4&lt;/span>;		&lt;span style="color:#75715e">/* header length */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">uint8_t&lt;/span> ip_tos;			&lt;span style="color:#75715e">/* type of service */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">short&lt;/span> ip_len;		&lt;span style="color:#75715e">/* total length */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">short&lt;/span> ip_id;		&lt;span style="color:#75715e">/* identification */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">short&lt;/span> ip_off;		&lt;span style="color:#75715e">/* fragment offset field */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define	IP_RF 0x8000			&lt;/span>&lt;span style="color:#75715e">/* reserved fragment flag */&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define	IP_DF 0x4000			&lt;/span>&lt;span style="color:#75715e">/* dont fragment flag */&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define	IP_MF 0x2000			&lt;/span>&lt;span style="color:#75715e">/* more fragments flag */&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define	IP_OFFMASK 0x1fff		&lt;/span>&lt;span style="color:#75715e">/* mask for fragmenting bits */&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">uint8_t&lt;/span> ip_ttl;			&lt;span style="color:#75715e">/* time to live */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">uint8_t&lt;/span> ip_p;			&lt;span style="color:#75715e">/* protocol */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">short&lt;/span> ip_sum;		&lt;span style="color:#75715e">/* checksum */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">in_addr&lt;/span> ip_src, ip_dst;	&lt;span style="color:#75715e">/* source and dest address */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>/usr/include/netinet/udp.h&lt;/p></description></item></channel></rss>